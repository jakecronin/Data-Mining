%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/jakecronin/OnGithub/Data Mining/Kmeans/movies_metadata.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/03/19 15:36:36
disp('loading IMDB data into matlab');

%% Initialize variables.
filename = 'movies_metadata.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,6,7,11,16,17,23,24]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{15} = datetime(dataArray{15}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{15} = cellfun(@(x) x(2:end-1), dataArray{15}, 'UniformOutput', false);
        dates{15} = datetime(dataArray{15}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
    catch
        dates{15} = repmat(datetime([NaN NaN NaN]), size(dataArray{15}));
    end
end

dates = dates(:,15);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [3,6,7,11,16,17,23,24]);
rawStringColumns = string(raw(:, [1,2,4,5,8,9,10,12,13,14,18,19,20,21,22]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,3,5,9,10,11,12,15]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
moviesmetadata = table;
moviesmetadata.adult = categorical(rawStringColumns(:, 1));
moviesmetadata.belongs_to_collection = rawStringColumns(:, 2);
moviesmetadata.budget = cell2mat(rawNumericColumns(:, 1));
moviesmetadata.genres = categorical(rawStringColumns(:, 3));
moviesmetadata.homepage = rawStringColumns(:, 4);
moviesmetadata.id = cell2mat(rawNumericColumns(:, 2));
moviesmetadata.imdb_id = cell2mat(rawNumericColumns(:, 3));
moviesmetadata.original_language = categorical(rawStringColumns(:, 5));
moviesmetadata.original_title = rawStringColumns(:, 6);
moviesmetadata.overview = rawStringColumns(:, 7);
moviesmetadata.popularity = cell2mat(rawNumericColumns(:, 4));
moviesmetadata.poster_path = rawStringColumns(:, 8);
moviesmetadata.production_companies = categorical(rawStringColumns(:, 9));
moviesmetadata.production_countries = categorical(rawStringColumns(:, 10));
moviesmetadata.release_date = dates{:, 1};
moviesmetadata.revenue = cell2mat(rawNumericColumns(:, 5));
moviesmetadata.runtime = cell2mat(rawNumericColumns(:, 6));
moviesmetadata.spoken_languages = categorical(rawStringColumns(:, 11));
moviesmetadata.status = categorical(rawStringColumns(:, 12));
moviesmetadata.tagline = rawStringColumns(:, 13);
moviesmetadata.title = rawStringColumns(:, 14);
moviesmetadata.video = categorical(rawStringColumns(:, 15));
moviesmetadata.vote_average = cell2mat(rawNumericColumns(:, 7));
moviesmetadata.vote_count = cell2mat(rawNumericColumns(:, 8));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% moviesmetadata.release_date=datenum(moviesmetadata.release_date);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawStringColumns R catIdx idx;